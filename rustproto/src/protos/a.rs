// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `a.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct Fuzzed {
    // message fields
    eoa_1: ::protobuf::SingularPtrField<EOA>,
    eoa_2: ::protobuf::SingularPtrField<EOA>,
    block: ::protobuf::SingularPtrField<Block>,
    create_tx_1: ::protobuf::SingularPtrField<Tx>,
    create_tx_2: ::protobuf::SingularPtrField<Tx>,
    call_tx_1: ::protobuf::SingularPtrField<Tx>,
    call_tx_2: ::protobuf::SingularPtrField<Tx>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fuzzed {
    fn default() -> &'a Fuzzed {
        <Fuzzed as ::protobuf::Message>::default_instance()
    }
}

impl Fuzzed {
    pub fn new() -> Fuzzed {
        ::std::default::Default::default()
    }

    // required .EOA eoa_1 = 1;


    pub fn get_eoa_1(&self) -> &EOA {
        self.eoa_1.as_ref().unwrap_or_else(|| EOA::default_instance())
    }
    pub fn clear_eoa_1(&mut self) {
        self.eoa_1.clear();
    }

    pub fn has_eoa_1(&self) -> bool {
        self.eoa_1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eoa_1(&mut self, v: EOA) {
        self.eoa_1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eoa_1(&mut self) -> &mut EOA {
        if self.eoa_1.is_none() {
            self.eoa_1.set_default();
        }
        self.eoa_1.as_mut().unwrap()
    }

    // Take field
    pub fn take_eoa_1(&mut self) -> EOA {
        self.eoa_1.take().unwrap_or_else(|| EOA::new())
    }

    // required .EOA eoa_2 = 2;


    pub fn get_eoa_2(&self) -> &EOA {
        self.eoa_2.as_ref().unwrap_or_else(|| EOA::default_instance())
    }
    pub fn clear_eoa_2(&mut self) {
        self.eoa_2.clear();
    }

    pub fn has_eoa_2(&self) -> bool {
        self.eoa_2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eoa_2(&mut self, v: EOA) {
        self.eoa_2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eoa_2(&mut self) -> &mut EOA {
        if self.eoa_2.is_none() {
            self.eoa_2.set_default();
        }
        self.eoa_2.as_mut().unwrap()
    }

    // Take field
    pub fn take_eoa_2(&mut self) -> EOA {
        self.eoa_2.take().unwrap_or_else(|| EOA::new())
    }

    // required .Block block = 10;


    pub fn get_block(&self) -> &Block {
        self.block.as_ref().unwrap_or_else(|| Block::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: Block) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut Block {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> Block {
        self.block.take().unwrap_or_else(|| Block::new())
    }

    // required .Tx create_tx_1 = 20;


    pub fn get_create_tx_1(&self) -> &Tx {
        self.create_tx_1.as_ref().unwrap_or_else(|| Tx::default_instance())
    }
    pub fn clear_create_tx_1(&mut self) {
        self.create_tx_1.clear();
    }

    pub fn has_create_tx_1(&self) -> bool {
        self.create_tx_1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_tx_1(&mut self, v: Tx) {
        self.create_tx_1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_tx_1(&mut self) -> &mut Tx {
        if self.create_tx_1.is_none() {
            self.create_tx_1.set_default();
        }
        self.create_tx_1.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_tx_1(&mut self) -> Tx {
        self.create_tx_1.take().unwrap_or_else(|| Tx::new())
    }

    // required .Tx create_tx_2 = 21;


    pub fn get_create_tx_2(&self) -> &Tx {
        self.create_tx_2.as_ref().unwrap_or_else(|| Tx::default_instance())
    }
    pub fn clear_create_tx_2(&mut self) {
        self.create_tx_2.clear();
    }

    pub fn has_create_tx_2(&self) -> bool {
        self.create_tx_2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_tx_2(&mut self, v: Tx) {
        self.create_tx_2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_tx_2(&mut self) -> &mut Tx {
        if self.create_tx_2.is_none() {
            self.create_tx_2.set_default();
        }
        self.create_tx_2.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_tx_2(&mut self) -> Tx {
        self.create_tx_2.take().unwrap_or_else(|| Tx::new())
    }

    // required .Tx call_tx_1 = 30;


    pub fn get_call_tx_1(&self) -> &Tx {
        self.call_tx_1.as_ref().unwrap_or_else(|| Tx::default_instance())
    }
    pub fn clear_call_tx_1(&mut self) {
        self.call_tx_1.clear();
    }

    pub fn has_call_tx_1(&self) -> bool {
        self.call_tx_1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_tx_1(&mut self, v: Tx) {
        self.call_tx_1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_call_tx_1(&mut self) -> &mut Tx {
        if self.call_tx_1.is_none() {
            self.call_tx_1.set_default();
        }
        self.call_tx_1.as_mut().unwrap()
    }

    // Take field
    pub fn take_call_tx_1(&mut self) -> Tx {
        self.call_tx_1.take().unwrap_or_else(|| Tx::new())
    }

    // required .Tx call_tx_2 = 31;


    pub fn get_call_tx_2(&self) -> &Tx {
        self.call_tx_2.as_ref().unwrap_or_else(|| Tx::default_instance())
    }
    pub fn clear_call_tx_2(&mut self) {
        self.call_tx_2.clear();
    }

    pub fn has_call_tx_2(&self) -> bool {
        self.call_tx_2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_tx_2(&mut self, v: Tx) {
        self.call_tx_2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_call_tx_2(&mut self) -> &mut Tx {
        if self.call_tx_2.is_none() {
            self.call_tx_2.set_default();
        }
        self.call_tx_2.as_mut().unwrap()
    }

    // Take field
    pub fn take_call_tx_2(&mut self) -> Tx {
        self.call_tx_2.take().unwrap_or_else(|| Tx::new())
    }
}

impl ::protobuf::Message for Fuzzed {
    fn is_initialized(&self) -> bool {
        if self.eoa_1.is_none() {
            return false;
        }
        if self.eoa_2.is_none() {
            return false;
        }
        if self.block.is_none() {
            return false;
        }
        if self.create_tx_1.is_none() {
            return false;
        }
        if self.create_tx_2.is_none() {
            return false;
        }
        if self.call_tx_1.is_none() {
            return false;
        }
        if self.call_tx_2.is_none() {
            return false;
        }
        for v in &self.eoa_1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.eoa_2 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_tx_1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_tx_2 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.call_tx_1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.call_tx_2 {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eoa_1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eoa_2)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_tx_1)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_tx_2)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.call_tx_1)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.call_tx_2)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eoa_1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.eoa_2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_tx_1.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_tx_2.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.call_tx_1.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.call_tx_2.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eoa_1.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.eoa_2.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_tx_1.as_ref() {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_tx_2.as_ref() {
            os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.call_tx_1.as_ref() {
            os.write_tag(30, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.call_tx_2.as_ref() {
            os.write_tag(31, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fuzzed {
        Fuzzed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EOA>>(
                    "eoa_1",
                    |m: &Fuzzed| { &m.eoa_1 },
                    |m: &mut Fuzzed| { &mut m.eoa_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EOA>>(
                    "eoa_2",
                    |m: &Fuzzed| { &m.eoa_2 },
                    |m: &mut Fuzzed| { &mut m.eoa_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Block>>(
                    "block",
                    |m: &Fuzzed| { &m.block },
                    |m: &mut Fuzzed| { &mut m.block },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tx>>(
                    "create_tx_1",
                    |m: &Fuzzed| { &m.create_tx_1 },
                    |m: &mut Fuzzed| { &mut m.create_tx_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tx>>(
                    "create_tx_2",
                    |m: &Fuzzed| { &m.create_tx_2 },
                    |m: &mut Fuzzed| { &mut m.create_tx_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tx>>(
                    "call_tx_1",
                    |m: &Fuzzed| { &m.call_tx_1 },
                    |m: &mut Fuzzed| { &mut m.call_tx_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tx>>(
                    "call_tx_2",
                    |m: &Fuzzed| { &m.call_tx_2 },
                    |m: &mut Fuzzed| { &mut m.call_tx_2 },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fuzzed>(
                    "Fuzzed",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Fuzzed {
        static mut instance: ::protobuf::lazy::Lazy<Fuzzed> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Fuzzed::new)
        }
    }
}

impl ::protobuf::Clear for Fuzzed {
    fn clear(&mut self) {
        self.eoa_1.clear();
        self.eoa_2.clear();
        self.block.clear();
        self.create_tx_1.clear();
        self.create_tx_2.clear();
        self.call_tx_1.clear();
        self.call_tx_2.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fuzzed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fuzzed {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EOA {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EOA {
    fn default() -> &'a EOA {
        <EOA as ::protobuf::Message>::default_instance()
    }
}

impl EOA {
    pub fn new() -> EOA {
        ::std::default::Default::default()
    }

    // required string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EOA {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EOA {
        EOA::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &EOA| { &m.address },
                    |m: &mut EOA| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<EOA>(
                    "EOA",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EOA {
        static mut instance: ::protobuf::lazy::Lazy<EOA> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(EOA::new)
        }
    }
}

impl ::protobuf::Clear for EOA {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EOA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EOA {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Block {
    // message fields
    id: ::std::option::Option<u64>,
    author: ::protobuf::SingularField<::std::string::String>,
    timestamp: ::std::option::Option<u64>,
    difficulty: ::std::option::Option<u64>,
    gas_limit: ::std::option::Option<u64>,
    last_hashes: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // required uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id.unwrap_or(0)
    }
    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = ::std::option::Option::Some(v);
    }

    // required string author = 2;


    pub fn get_author(&self) -> &str {
        match self.author.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_author(&mut self) {
        self.author.clear();
    }

    pub fn has_author(&self) -> bool {
        self.author.is_some()
    }

    // Param is passed by value, moved
    pub fn set_author(&mut self, v: ::std::string::String) {
        self.author = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_author(&mut self) -> &mut ::std::string::String {
        if self.author.is_none() {
            self.author.set_default();
        }
        self.author.as_mut().unwrap()
    }

    // Take field
    pub fn take_author(&mut self) -> ::std::string::String {
        self.author.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // required uint64 difficulty = 4;


    pub fn get_difficulty(&self) -> u64 {
        self.difficulty.unwrap_or(0)
    }
    pub fn clear_difficulty(&mut self) {
        self.difficulty = ::std::option::Option::None;
    }

    pub fn has_difficulty(&self) -> bool {
        self.difficulty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_difficulty(&mut self, v: u64) {
        self.difficulty = ::std::option::Option::Some(v);
    }

    // required uint64 gas_limit = 5;


    pub fn get_gas_limit(&self) -> u64 {
        self.gas_limit.unwrap_or(0)
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = ::std::option::Option::None;
    }

    pub fn has_gas_limit(&self) -> bool {
        self.gas_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = ::std::option::Option::Some(v);
    }

    // required string last_hashes = 6;


    pub fn get_last_hashes(&self) -> &str {
        match self.last_hashes.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_last_hashes(&mut self) {
        self.last_hashes.clear();
    }

    pub fn has_last_hashes(&self) -> bool {
        self.last_hashes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_hashes(&mut self, v: ::std::string::String) {
        self.last_hashes = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_hashes(&mut self) -> &mut ::std::string::String {
        if self.last_hashes.is_none() {
            self.last_hashes.set_default();
        }
        self.last_hashes.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_hashes(&mut self) -> ::std::string::String {
        self.last_hashes.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        if self.author.is_none() {
            return false;
        }
        if self.timestamp.is_none() {
            return false;
        }
        if self.difficulty.is_none() {
            return false;
        }
        if self.gas_limit.is_none() {
            return false;
        }
        if self.last_hashes.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.author)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.difficulty = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_limit = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.last_hashes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.author.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.difficulty {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gas_limit {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.last_hashes.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.author.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.difficulty {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.gas_limit {
            os.write_uint64(5, v)?;
        }
        if let Some(ref v) = self.last_hashes.as_ref() {
            os.write_string(6, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "id",
                    |m: &Block| { &m.id },
                    |m: &mut Block| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "author",
                    |m: &Block| { &m.author },
                    |m: &mut Block| { &mut m.author },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &Block| { &m.timestamp },
                    |m: &mut Block| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "difficulty",
                    |m: &Block| { &m.difficulty },
                    |m: &mut Block| { &mut m.difficulty },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas_limit",
                    |m: &Block| { &m.gas_limit },
                    |m: &mut Block| { &mut m.gas_limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "last_hashes",
                    |m: &Block| { &m.last_hashes },
                    |m: &mut Block| { &mut m.last_hashes },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Block>(
                    "Block",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Block {
        static mut instance: ::protobuf::lazy::Lazy<Block> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Block::new)
        }
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.author.clear();
        self.timestamp = ::std::option::Option::None;
        self.difficulty = ::std::option::Option::None;
        self.gas_limit = ::std::option::Option::None;
        self.last_hashes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Tx {
    // message fields
    sender: ::protobuf::SingularField<::std::string::String>,
    receiver: ::protobuf::SingularField<::std::string::String>,
    nonce: ::std::option::Option<u64>,
    gas_price: ::std::option::Option<u64>,
    gas: ::std::option::Option<u64>,
    value: ::std::option::Option<u64>,
    data: ::protobuf::SingularField<::std::string::String>,
    is_create_tx: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tx {
    fn default() -> &'a Tx {
        <Tx as ::protobuf::Message>::default_instance()
    }
}

impl Tx {
    pub fn new() -> Tx {
        ::std::default::Default::default()
    }

    // required string sender = 1;


    pub fn get_sender(&self) -> &str {
        match self.sender.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    pub fn has_sender(&self) -> bool {
        self.sender.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        if self.sender.is_none() {
            self.sender.set_default();
        }
        self.sender.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        self.sender.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string receiver = 2;


    pub fn get_receiver(&self) -> &str {
        match self.receiver.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    pub fn has_receiver(&self) -> bool {
        self.receiver.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        if self.receiver.is_none() {
            self.receiver.set_default();
        }
        self.receiver.as_mut().unwrap()
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        self.receiver.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 nonce = 3;


    pub fn get_nonce(&self) -> u64 {
        self.nonce.unwrap_or(0)
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // required uint64 gas_price = 4;


    pub fn get_gas_price(&self) -> u64 {
        self.gas_price.unwrap_or(0)
    }
    pub fn clear_gas_price(&mut self) {
        self.gas_price = ::std::option::Option::None;
    }

    pub fn has_gas_price(&self) -> bool {
        self.gas_price.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_price(&mut self, v: u64) {
        self.gas_price = ::std::option::Option::Some(v);
    }

    // required uint64 gas = 5;


    pub fn get_gas(&self) -> u64 {
        self.gas.unwrap_or(0)
    }
    pub fn clear_gas(&mut self) {
        self.gas = ::std::option::Option::None;
    }

    pub fn has_gas(&self) -> bool {
        self.gas.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas(&mut self, v: u64) {
        self.gas = ::std::option::Option::Some(v);
    }

    // required uint64 value = 6;


    pub fn get_value(&self) -> u64 {
        self.value.unwrap_or(0)
    }
    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u64) {
        self.value = ::std::option::Option::Some(v);
    }

    // required string data = 7;


    pub fn get_data(&self) -> &str {
        match self.data.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        self.data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bool is_create_tx = 8;


    pub fn get_is_create_tx(&self) -> bool {
        self.is_create_tx.unwrap_or(false)
    }
    pub fn clear_is_create_tx(&mut self) {
        self.is_create_tx = ::std::option::Option::None;
    }

    pub fn has_is_create_tx(&self) -> bool {
        self.is_create_tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_create_tx(&mut self, v: bool) {
        self.is_create_tx = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Tx {
    fn is_initialized(&self) -> bool {
        if self.sender.is_none() {
            return false;
        }
        if self.receiver.is_none() {
            return false;
        }
        if self.nonce.is_none() {
            return false;
        }
        if self.gas_price.is_none() {
            return false;
        }
        if self.gas.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        if self.data.is_none() {
            return false;
        }
        if self.is_create_tx.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.receiver)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_price = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.data)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_create_tx = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.sender.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.receiver.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.nonce {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gas_price {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gas {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.data.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.is_create_tx {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.sender.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.receiver.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.nonce {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.gas_price {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.gas {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.value {
            os.write_uint64(6, v)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.is_create_tx {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tx {
        Tx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sender",
                    |m: &Tx| { &m.sender },
                    |m: &mut Tx| { &mut m.sender },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiver",
                    |m: &Tx| { &m.receiver },
                    |m: &mut Tx| { &mut m.receiver },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &Tx| { &m.nonce },
                    |m: &mut Tx| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas_price",
                    |m: &Tx| { &m.gas_price },
                    |m: &mut Tx| { &mut m.gas_price },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas",
                    |m: &Tx| { &m.gas },
                    |m: &mut Tx| { &mut m.gas },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "value",
                    |m: &Tx| { &m.value },
                    |m: &mut Tx| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "data",
                    |m: &Tx| { &m.data },
                    |m: &mut Tx| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_create_tx",
                    |m: &Tx| { &m.is_create_tx },
                    |m: &mut Tx| { &mut m.is_create_tx },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Tx>(
                    "Tx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Tx {
        static mut instance: ::protobuf::lazy::Lazy<Tx> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Tx::new)
        }
    }
}

impl ::protobuf::Clear for Tx {
    fn clear(&mut self) {
        self.sender.clear();
        self.receiver.clear();
        self.nonce = ::std::option::Option::None;
        self.gas_price = ::std::option::Option::None;
        self.gas = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.data.clear();
        self.is_create_tx = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x07a.proto\"\xe8\x01\n\x06Fuzzed\x12\x19\n\x05eoa_1\x18\x01\x20\x02(\
    \x0b2\x04.EOAR\x04eoa1\x12\x19\n\x05eoa_2\x18\x02\x20\x02(\x0b2\x04.EOAR\
    \x04eoa2\x12\x1c\n\x05block\x18\n\x20\x02(\x0b2\x06.BlockR\x05block\x12#\
    \n\x0bcreate_tx_1\x18\x14\x20\x02(\x0b2\x03.TxR\tcreateTx1\x12#\n\x0bcre\
    ate_tx_2\x18\x15\x20\x02(\x0b2\x03.TxR\tcreateTx2\x12\x1f\n\tcall_tx_1\
    \x18\x1e\x20\x02(\x0b2\x03.TxR\x07callTx1\x12\x1f\n\tcall_tx_2\x18\x1f\
    \x20\x02(\x0b2\x03.TxR\x07callTx2\"\x1f\n\x03EOA\x12\x18\n\x07address\
    \x18\x01\x20\x02(\tR\x07address\"\xab\x01\n\x05Block\x12\x0e\n\x02id\x18\
    \x01\x20\x02(\x04R\x02id\x12\x16\n\x06author\x18\x02\x20\x02(\tR\x06auth\
    or\x12\x1c\n\ttimestamp\x18\x03\x20\x02(\x04R\ttimestamp\x12\x1e\n\ndiff\
    iculty\x18\x04\x20\x02(\x04R\ndifficulty\x12\x1b\n\tgas_limit\x18\x05\
    \x20\x02(\x04R\x08gasLimit\x12\x1f\n\x0blast_hashes\x18\x06\x20\x02(\tR\
    \nlastHashes\"\xc9\x01\n\x02Tx\x12\x16\n\x06sender\x18\x01\x20\x02(\tR\
    \x06sender\x12\x1a\n\x08receiver\x18\x02\x20\x02(\tR\x08receiver\x12\x14\
    \n\x05nonce\x18\x03\x20\x02(\x04R\x05nonce\x12\x1b\n\tgas_price\x18\x04\
    \x20\x02(\x04R\x08gasPrice\x12\x10\n\x03gas\x18\x05\x20\x02(\x04R\x03gas\
    \x12\x14\n\x05value\x18\x06\x20\x02(\x04R\x05value\x12\x12\n\x04data\x18\
    \x07\x20\x02(\tR\x04data\x12\x20\n\x0cis_create_tx\x18\x08\x20\x02(\x08R\
    \nisCreateTx\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
